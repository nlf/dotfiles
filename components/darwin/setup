#!/usr/bin/env zsh

setopt ERR_EXIT PIPEFAIL

() {
  # sudo allows touchid
  local pamfile=/etc/pam.d/sudo
  local firstline="# sudo: auth account password session"
  local newline="auth       sufficient     pam_tid.so"

  local has_tid=${#$(ls /usr/lib/pam/pam_tid.so*)}
  if [[ $has_tid -gt 0 ]]; then
    if ! grep -q pam_tid.so $pamfile; then
      _log "> Enabling TouchID access for sudo"
      if [[ "$(head -n1 $pamfile)" == "$firstline" ]]; then
        sudo --reset-timestamp
        _log "> Writing $pamfile"
        sudo sed -i .bak -e "s/${firstline}/${firstline}\n${newline}/" "$pamfile"
        sudo rm "${pamfile}.bak"
      else
        _log "> ERROR: $pamfile is in an unexpected format"
        return 1
      fi
    fi
  fi

  # disk encryption
  if ! fdesetup status | grep -q -E 'FileVault is (On|Off, but will be enabled after the next restart).'; then
    _log "> Enabling disk encryption"
    sudo fdesetup enable -user "$USER" | tee "$HOME/Desktop/FileVault Recovery Key.txt"
  fi

  _defaults_write () {
    local domain=$1
    local key=$2
    local kind=$3
    local value=$4
    unsetopt ERR_EXIT

    local needsupdate=0
    local actual=$(defaults read $domain $key || echo "UNSET")
    if [[ $kind == "-bool" ]]; then
      local expected
      [[ $value == "true" ]] && expected=1 || expected=0
      [[ $actual -ne $expected ]] && needsupdate=1
    else
      [[ $actual != $value ]] && needsupdate=1
    fi

    if [[ $needsupdate -eq 1 ]]; then
      local result
      _log "> Setting $domain.$key = $kind $value"
      defaults write $domain $key $kind $value
      result=$?
      [[ $result -ne 0 ]] && return $result
      return -1
    fi

    return 0
  }

  # firewall
  _defaults_write /Library/Preferences/com.apple.alf globalstate -int 1
  if [[ $? -eq -1 ]]; then
    _log "> Starting firewall"
    launchctl load /System/Library/LaunchDaemons/com.apple.alf.agent.plist
  fi

  # screensaver
  _defaults_write com.apple.screensaver askForPassword -int 1
  _defaults_write com.apple.screensaver askForPasswordDelay -int 0
  _defaults_write com.apple.dock wvous-bl-corner -int 5 # bottom left hot corner = screensaver
  _defaults_write com.apple.dock wvous-bl-modifier -int 0

  # menubar
  _defaults_write com.apple.menuextra.clock IsAnalog -bool false
  _defaults_write com.apple.menuextra.clock ShowDate -int 2
  _defaults_write com.apple.menuextra.clock ShowDayOfMonth -int 0
  _defaults_write com.apple.menuextra.clock ShowDayOfWeek -int 0

  # dark mode
  _defaults_write -globalDomain AppleInterfaceStyle -string Dark

  # disable auto capitalization and whatnot
  _defaults_write -globalDomain NSAutomaticCapitalizationEnabled -int 0
  _defaults_write -globalDomain NSAutomaticDashSubstituionEnabled -int 0
  _defaults_write -globalDomain NSAutomaticPeriodSubstitutionEnabled -int 0
  _defaults_write -globalDomain NSAutomaticQuoteSubstitutionEnabled -int 0
  _defaults_write -globalDomain NSAutomaticSpellingCorrectionEnabled -int 0
  _defaults_write -globalDomain WebAutomaticSpellingCorrectionEnabled -int 0

  # touchpad settings (tap to click)
  _defaults_write com.apple.AppleMultitouchTrackpad Clicking -int 1
  _defaults_write com.apple.AppleMultitouchTrackpad FirstClickThreshold -int 2
  _defaults_write com.apple.AppleMultitouchTrackpad SecondClickThreshold -int 2

  # dock settings
  _defaults_write com.apple.dock autohide -int 1
  _defaults_write com.apple.dock mineffect -string scale
  _defaults_write com.apple.dock minimize-to-application -int 1
  _defaults_write com.apple.dock show-recents -int 0
  _defaults_write com.apple.dock tilesize -int 44

  # finder open home
  _defaults_write com.apple.finder NewWindowTarget -string PfHm
  _defaults_write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"

  # safari
  _defaults_write com.apple.Safari UniversalSearchEnabled -bool false
  _defaults_write com.apple.Safari SuppressSearchSuggestions -bool true
  _defaults_write com.apple.Safari AutoOpenSafeDownloads -bool false
  _deafults_write com.apple.Safari SendDoNotTrackHTTPHeader -bool true
} "$@"
