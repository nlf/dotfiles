#!/usr/bin/env zsh

setopt ERR_EXIT PIPEFAIL

() {
  # setup global vars
  _bootstrap_root=${ZSH_ARGZERO:a:h}
  _bootstrap_logs=${_bootstrap_root}/logs
  _bootstrap_log=${_bootstrap_logs}/bootstrap.log
  _bootstrap_debug=${_bootstrap_logs}/debug.log
  _bootstrap_components=${_bootstrap_root}/components
  _bootstrap_done=0
  _bootstrap_tail_pid=

  # make the log dir and truncate the log files
  mkdir -p $_bootstrap_logs
  printf '' > $_bootstrap_log > $_bootstrap_debug

  # start streaming the log file
  tail -f $_bootstrap_log &
  _bootstrap_tail_pid=$$
  # trap exits and interrupts so we can cleanup
  trap '_bootstrap_cleanup' EXIT
  trap '_bootstrap_cleanup; exit 1' INT

  # redirect all output to debug log
  exec 1>>$_bootstrap_debug 2>>$_bootstrap_debug

  # called when exiting to remove global variables
  _bootstrap_cleanup () {
    local _failed=0
    if [[ $_bootstrap_done -ne 1 ]]; then
      _log "> ERROR! Bootstrap failed: see ${_bootstrap_debug} for details"
      _failed=1
    else
      _log "> Bootstrap complete!"
      [[ -f "${_bootstrap_root}/postinstall.txt" ]] && _log "$(cat ${_bootstrap_root}/postinstall.txt)"
    fi

    if (( ${+_bootstrap_tail_pid} )); then
      pkill -P $_bootstrap_tail_pid
    fi

    unset _bootstrap_root
    unset _bootstrap_components
    unset _bootstrap_logs
    unset _bootstrap_debug
    unset _bootstrap_log
    unset _bootstrap_done
    unset _bootstrap_tail_pid
    unset -f _log
    unset -f _bootstrap_cleanup
    exit $_failed
  }

  # logging helper
  _log () {
    echo "$@" | tee -a $_bootstrap_log
  }

  # symlink helper
  _bootstrap_link () {
    local target=$1
    local link=$2

    if [[ ! -e "$link" || ! -L "$link" || "${link:P}" != "$target" ]]; then
      _log "> Creating symlink: $target -> $link"
      rm -rf "$link"
      ln -sf "$target" "$link"
    fi
  }

  # define components, these will be loaded in order
  local enabled_components=( homebrew kitty neovim ssh powerlevel10k zsh private )

  # if components/platform exists run that first
  local platform=${$(uname -s):l}
  [[ -d "${_bootstrap_components}/${platform}" ]] && enabled_components=( $platform $enabled_components )

  for component in "${enabled_components[@]}"; do
    if [[ -d ${_bootstrap_components}/${component} && -x ${_bootstrap_components}/${component}/setup ]]; then
      source ${_bootstrap_components}/${component}/setup
    fi
  done

  _bootstrap_done=1
}
